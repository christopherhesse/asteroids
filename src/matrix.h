/* This file was automatically generated.  Do not edit! */
typedef float float32;
typedef union {
    struct {
        float32 x;
        float32 y;
        float32 z;
        float32 w;
    };
    float32 m[4];
}Q4;
Q4 Q4Slerp(Q4 start,Q4 end,float32 t);
Q4 Q4Nlerp(Q4 start,Q4 end,float32 t);
Q4 Q4Lerp(Q4 start,Q4 end,float32 t);
typedef union {
    struct {
        float32 x;
        float32 y;
        float32 z;
        float32 w;
    };
    float32 m[4];
}V4;
V4 Q4RotateV4(Q4 q,V4 v);
Q4 Q4Subtract(Q4 ql,Q4 qr);
Q4 Q4Add(Q4 ql,Q4 qr);
Q4 Q4Multiply(Q4 ql,Q4 qr);
typedef union {
    struct {
        float32 x;
        float32 y;
        float32 z;
    };
    float32 m[3];
}V3;
V3 Q4Axis(Q4 q);
float32 Q4Angle(Q4 q);
Q4 Q4Inverse(Q4 q);
Q4 Q4Conjugate(Q4 q);
Q4 Q4Normalize(Q4 q);
float32 Q4Length(Q4 q);
Q4 Q4FromAngleAxis(float32 radians,V3 axis);
extern Q4 Q4Identity;
typedef struct {
    float32 m[16];
}M4;
V4 M4MultiplyV4(M4 m,V4 v);
V3 M4MultiplyV3(M4 m,V3 v);
M4 M4Subtract(M4 ml,M4 mr);
M4 M4Add(M4 ml,M4 mr);
M4 M4RotateZ(M4 m,float32 radians);
M4 M4RotateY(M4 m,float32 radians);
M4 M4RotateX(M4 m,float32 radians);
M4 M4Rotate(M4 m,float32 radians,V3 axis);
M4 M4Multiply(M4 ml,M4 mr);
M4 M4PerspectiveProjection(float32 fovRadians,float32 aspect,float32 near,float32 far);
M4 M4Translate(M4 m,V3 v);
M4 M4Scale(M4 m,V3 v);
M4 M4OrthographicProjection(float32 left,float32 right,float32 bottom,float32 top,float32 near,float32 far);
M4 M4InverseTranspose(M4 m,bool *s);
M4 M4Transpose(M4 m);
M4 M4Inverse(M4 m,bool *success);
extern const M4 M4Identity;
typedef struct {
    float32 m[9];
}M3;
M3 M3FromM4(M4 m);
V3 M3MultiplyV3(M3 ml,V3 vr);
typedef union {
    struct {
        float32 x;
        float32 y;
    };
    float32 m[2];
}V2;
V2 M3MultiplyV2(M3 ml,V2 vr);
M3 M3Subtract(M3 ml,M3 mr);
M3 M3Add(M3 ml,M3 mr);
M3 M3Scale(M3 m,V2 v);
M3 M3Rotate(M3 m,float32 radians);
M3 M3Multiply(M3 ml,M3 mr);
M3 M3Translate(M3 m,V2 v);
M3 M3InverseTranspose(M3 m,bool *s);
M3 M3Transpose(M3 m);
M3 M3Inverse(M3 m,bool *success);
extern const M3 M3Identity;
V4 V4Minimum(V4 vl,V4 vr);
V4 V4Maximum(V4 vl,V4 vr);
V4 V4Project(V4 vl,V4 vr);
V4 V4Lerp(V4 start,V4 end,float32 t);
float32 V4DotProduct(V4 vl,V4 vr);
V4 V4Divide(V4 vl,V4 vr);
V4 V4Multiply(V4 vl,V4 vr);
V4 V4Subtract(V4 vl,V4 vr);
V4 V4Add(V4 vl,V4 vr);
float32 V4Distance(V4 vl,V4 vr);
V4 V4DivideScalar(V4 v,float32 s);
V4 V4MultiplyScalar(V4 v,float32 s);
V4 V4SubtractScalar(V4 v,float32 s);
V4 V4AddScalar(V4 v,float32 s);
V4 V4Normalize(V4 v);
V4 V4Negate(V4 v);
float32 V4Length(V4 v);
V3 V3Minimum(V3 vl,V3 vr);
V3 V3Maximum(V3 vl,V3 vr);
V3 V3Project(V3 vl,V3 vr);
V3 V3Lerp(V3 start,V3 end,float32 t);
float32 V3DotProduct(V3 vl,V3 vr);
V3 V3Divide(V3 vl,V3 vr);
V3 V3Multiply(V3 vl,V3 vr);
V3 V3Subtract(V3 vl,V3 vr);
V3 V3Add(V3 vl,V3 vr);
float32 V3Distance(V3 vl,V3 vr);
V3 V3DivideScalar(V3 v,float32 s);
V3 V3MultiplyScalar(V3 v,float32 s);
V3 V3SubtractScalar(V3 v,float32 s);
V3 V3AddScalar(V3 v,float32 s);
V3 V3Normalize(V3 v);
V3 V3Negate(V3 v);
float32 V3Length(V3 v);
V2 V2Minimum(V2 vl,V2 vr);
V2 V2Maximum(V2 vl,V2 vr);
V2 V2Project(V2 vl,V2 vr);
V2 V2Lerp(V2 start,V2 end,float32 t);
float32 V2DotProduct(V2 vl,V2 vr);
V2 V2Divide(V2 vl,V2 vr);
V2 V2Multiply(V2 vl,V2 vr);
V2 V2Subtract(V2 vl,V2 vr);
V2 V2Add(V2 vl,V2 vr);
float32 V2Distance(V2 vl,V2 vr);
V2 V2DivideScalar(V2 v,float32 s);
V2 V2MultiplyScalar(V2 v,float32 s);
V2 V2SubtractScalar(V2 v,float32 s);
V2 V2AddScalar(V2 v,float32 s);
V2 V2Normalize(V2 v);
V2 V2Negate(V2 v);
float32 V2Length(V2 v);
float32 DegreesToRadians(float32 degrees);
#define INTERFACE 0
